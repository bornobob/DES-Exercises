/*
 * generated by Xtext 2.23.0
 */
package lego.rover.validation;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.xtext.validation.Check;

import lego.rover.mission.Action;
import lego.rover.mission.Arg;
import lego.rover.mission.Args;
import lego.rover.mission.Mission;
import lego.rover.mission.Missions;
import lego.rover.mission.Robot;
import lego.rover.mission.Robots;
import lego.rover.mission.Simulation;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MissionValidator extends AbstractMissionValidator {
	@Check
	public void checkValidMissionNames(Simulation sim) {
		List<String> missionNames = new ArrayList<String>();
		if (sim.getMissions() != null && sim.getMissions().getMissions() != null) {
			for (int i = 0; i < sim.getMissions().getMissions().size(); i++) {
				missionNames.add(sim.getMissions().getMissions().get(i).getName());
			}
		}
		
		if (sim.getRobots() != null && sim.getRobots().getRobots() != null) {
			for (int i = 0; i < sim.getRobots().getRobots().size(); i++) {
				if (!missionNames.contains(sim.getRobots().getRobots().get(i).getMission())) { 
					error("Mission name \"" + sim.getRobots().getRobots().get(i).getMission() + "\"" +
						  "is used but is not defined!", null);
				}
			}
		}
	}
	
	@Check
	public void checkDuplicateMissionNames(Missions missions) {
		System.out.println("HERE");
		Mission[] mArray = (Mission[])missions.getMissions().toArray();
		int numberMissions = missions.getMissions().size();
		for (int i = 0; i < numberMissions; i++) {
			for (int j = i+1; j < numberMissions; j++) {
				if (mArray[i] != mArray[j] && mArray[i].getName().equals(mArray[j].getName())) {
					error("Duplicate mission name: \"" + mArray[i].getName() + "\"!", null);
				}
			}
		}
	}
	
	@Check
	public void checkDuplicateMissions(Missions missions) {
		System.out.println("HERE (MISSIons)");
		Mission[] mArray = (Mission[])missions.getMissions().toArray();
		int numberMissions = missions.getMissions().size();
		for (int i = 0; i < numberMissions; i++) {
			for (int j = i+1; j < numberMissions; j++) {
				if (!mArray[i].getName().equals(mArray[j].getName()) && Auxiliary.EqualUpToRenaming(mArray[i], mArray[j])) {
					warning("Missions \"" + mArray[i].getName() + "\" and \"" + mArray[j].getName() + "\" are equal up to renaming!", null);
				}
			}
		}
	}
	
	@Check
	public void checkDuplicateRobotNames(Robots robots) {
		Robot[] rArray = (Robot[])robots.getRobots().toArray();
		int numberRobots = robots.getRobots().size();
		for (int i = 0; i < numberRobots; i++) {
			for (int j = i+1; j < numberRobots; j++) {
				if (rArray[i] != rArray[j] && rArray[i].getName().equals(rArray[j].getName())) {
					error("Duplicate robot name: \"" + rArray[i].getName() + "\"!", null);
				}
			}
		}
	}
	
	@Check
	public void checkDuplicateArgNames(Args args) {
		Arg[] aArray = (Arg[])args.getArguments().toArray();
		int numberArgs = args.getArguments().size();
		for (int i = 0; i < numberArgs; i++) {
			for (int j = i+1; j < numberArgs; j++) {
				if (aArray[i] != aArray[j] && aArray[i].getVar().equals(aArray[j].getVar())) {
					error("Duplicate robot name: \"" + aArray[i].getVar() + "\"!", null);
				}
			}
		}
	}
	
	@Check
	public void checkValidActionArgs(Action action) {
		if (action.getArguments() != null && action.getArguments().getArguments().size() > 0) {
			List<String> validArgs = Auxiliary.ValidArgs(action.getType());
			for (int i = 0; i < action.getArguments().getArguments().size(); i++) {
				if (!validArgs.contains(action.getArguments().getArguments().get(i).getVar())) {
					error("Action \"" + action.getType().toString() + "\" does not have argument \"" + 
						  action.getArguments().getArguments().get(i).getVar() + "\"", null);
				}
			}
		}
		
	}
	
}
